{"componentChunkName":"component---src-templates-blog-list-js","path":"/page/2","webpackCompilationHash":"d3540fcf6852014d7a9f","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/posts/javascript-classes-lets-know-behind-the-scenes/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*H-pLl9S63QJl49ad8Fa-tg.jpeg\"></p>\n<p>So, as we know <strong>JavaScript Classes</strong> are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a very structured way. In this article, I am not going to tell you how to write a <strong>JavaScript Classes</strong> my main focus is just to implement in different approaches.\nIn this article we are going to implement <strong>JavaScript Classes</strong> in three ways:-</p>\n<ul>\n<li><strong>Using Factory functions</strong></li>\n<li><strong>Using Constructor Function (Pseudo Class)</strong></li>\n<li><strong>Using Classes</strong>\nSo, let’s start.</li>\n</ul>\n<h2>Using Factories Functions</h2>\n<p>As I wrote we are going to implement by <strong>factories function</strong>. Let’s first talk about what are <strong>factories functions</strong>.\n<strong>Factories functions</strong> are simple functions that take values from and returns an object to you they are not <strong>constructor</strong> functions. We just have to call them and they just return us an object and we can store these object in any variable.\nNow, we going to apply our <strong>class</strong> using these <strong>factories functions</strong>.\nLet’s first make an object that holds the function that is linked with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">[[Prototype]]</a> of the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> studFunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">percentage</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">result</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we created an object that has two methods <strong>percentage</strong> and <strong>result</strong> for our <strong>Student</strong> object.\nNow, let’s create a factory function that creates an object for us and return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>studFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, here we created a function that takes send three parameters and then we created an object using <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a></strong> because of this method us to create an empty object and set the <strong>[[Prototype]]</strong> to the <strong>studFunctions</strong> that we created. Now, we created our class now it’s time to create instances with this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span>stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 63.33</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass</span></code></pre></div>\n<h2>Using Constructor Function (Pseudo Class)</h2>\n<p>Now it turns to make the class using the pseudo-class method. For that first, we have to create a constructor function for that.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, we just here created a function that takes three parameters and inside that <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this\">this</a></strong> because in the after some time we are going to call this function with <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/new\">new</a></strong> operator that returns an object from that function and then <strong>this</strong> refers to that same object.\nNow we are putting some function in the <strong>prototype</strong> of the function. <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Prototype</a></strong> is just a simple object that default attach with the function and contains a contains a default <strong>constructor</strong> property that points to the same function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">percentage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, same as previously did we did same just putting the method in the prototype of the function.\nWe created our class. Now let’s just make an instance from this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2>Using Classes (ES6 classes)</h2>\n<p>Now finally, we are going to implement <strong>JavaScript classes</strong> using ES6 classes.\nFor that, we just have first had to put <strong>class</strong> keyword in front Class name inside that there’s a special <strong>constructor</strong> method where we just going to put values as we did in previously where we make constructor function. Then just simply put the method that we put in the <strong>prototype</strong> in the previous section.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we created our class with ES6 class syntax also. Now just initiate our class as we previously did in <strong>pseudo class</strong> part.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2><strong>Conclusion</strong></h2>\n<p>So, If you compare all these three approaches to writing <strong>JavaScript class</strong> then you the last step of making classes easier and cleaner way. But the motive of this article is just to demonstrate how it works behind the scenes i.e if we broke down to make a class into smaller parts then <strong>factory functions</strong> approach makes gave you an idea how it works.</p>\n<p>Follow me on <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.<br/>\nFollow me on <a href=\"https://github.com/praveen-me\">Github</a>.</p>","wordCount":{"words":570},"excerpt":"So, as we know JavaScript Classes are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a very…","frontmatter":{"title":"JavaScript Classes: Let’s Know Behind the Scenes","date":"11-30-2018"}}},{"node":{"fields":{"slug":"/posts/do-static-routing-with-node/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*2EeBPk5GJynWPjD1AuuPgw.jpeg\"></p>\n<p>So, first of all, why am I writing this because of when I started <strong>Node</strong> couple of days back, I got just frustrated with searching about how can I do static routing using Node but I can’t find anything good and I just go through every question of <strong>Stack Overflow</strong> but I can’t find anything good and everyone is talking about <strong>Express</strong> in every question it doesn’t matter whether the guy that asks the question only about in <strong>Node</strong>.\nSo, first of all, let’s talk about static routing.</p>\n<h2>What is Static Routing?</h2>\n<p>So, Static Routing is that kind of routing where we to set a router manually for a specific route. There are some demerits of it like everytime if we have a new file then we have set route for that file manually. And also it’s hard to handle the route for every file in our project.</p>\n<h2>Serve Static Files</h2>\n<p>So, let’s start routing i.e start making routes and serve files according to it.\nSo, we have our routes like this:-</p>\n<ul>\n<li><strong>“/”</strong> — <strong>index.html</strong></li>\n<li><strong>“/about”</strong> — <strong>about.html</strong></li>\n<li><strong>“/contact”</strong> — <strong>contact.html</strong></li>\n<li><strong>“/public/stylesheet/style.css”</strong> — <strong>style.css</strong></li>\n<li><strong>“/public/images/1.jpg”</strong> — <strong>1.jpg</strong></li>\n<li><strong>“/public/images/2.png”</strong> — <strong>2.png</strong></li>\n</ul>\n<p>And we have the directory like this:-</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    public/\n      |\n      -&gt; index.html\n      -&gt; about.html\n      -&gt; contact.html\n      -&gt; stylesheet/\n            |\n            -&gt; style.css\n      -&gt; images/\n            |\n            -&gt; 1.jpg\n            -&gt; 2.png\n      |\n      index.js</code></pre></div>\n<p>So, first we have to create our server first:-</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3440/1*e7oNU6yQMqDXJfGepEBXkA.png\" alt=\"Created Server\"><em>Created Server</em></p>\n<p>Now, we created our server so we need <strong>fs</strong> package. Then we have to take the benefit of <strong>Node JS</strong> <strong>request</strong> object that contains two special property i.e <strong>url</strong> and <strong>method</strong>. The <em>request.method</em> gave us the method of the request and <em>request.url</em> will give us the browser’s request URL that the browser requested for. Now it’s time to check for the URL and method and serve the static pages.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3664/1*kA67K--nS6Dki-P2uODhSg.png\" alt=\"Make a route and render file according to it.\"> <em>Make a route and render file according to it.</em></p>\n<p>And follow the above same steps and every time just change the <strong>case</strong> and read the file for that specific kind and just change the header every time.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2584/1*oT3nyg9uGdmWpazzgsWZ0g.png\" alt=\"Headers for specific files\"><em>Headers for specific files</em></p>\n<p>So, you have done your static routing with node. 😄</p>\n<p>Follow me on <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.\nFollow me on <a href=\"https://github.com/praveen-me\">Github</a>.</p>","wordCount":{"words":347},"excerpt":"So, first of all, why am I writing this because of when I started Node couple of days back, I got just frustrated with searching about how can I do…","frontmatter":{"title":"Do Static Routing with Node","date":"12-03-2018"}}},{"node":{"fields":{"slug":"/posts/scope-local-global-and-lexical/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/0*b92ypc_3zspCRuha.png\"></p>\n<p><strong>A scope</strong> is like a limited area. Scopes are the essential part of every programming language. They are behaving like a limited space for a declaration i.e where every variable is declared and what part of the program that variable can be accessed.</p>\n<p>As <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\">MDN</a> Says — <strong>The context in which values and expressions are “visible,” or can be referenced.</strong></p>\n<p>There are two types of scopes:-</p>\n<ul>\n<li>\n<p>Global Scope</p>\n</li>\n<li>\n<p>Local Scope\nBut I also going to talk about <strong>Lexical Scope</strong>.</p>\n</li>\n</ul>\n<h2>What is Global Scope?</h2>\n<p>Global Scope is a term used when a variable is declared outside any of the functions i.e the variables should be declared globally.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">//I am a global scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">iAmLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>           <span class=\"token comment\">//I am a global scope</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'global'  </span>\n<span class=\"token punctuation\">}</span>                               <span class=\"token comment\">//I am a global scope</span></code></pre></div>\n<p>So, If you look at the above function there’s variable <strong>a</strong> is declared globally and it can be accessed inside the function. Here, <strong>iAmLocal()</strong> function created its own scope. But here’s the variable is declared in global scope. So, the point is that if we declared a variable globally it can be accessed inside a function.</p>\n<p>Let's take another example:-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">iAmLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token string\">'is I am local'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">iAmLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//Think and let's give it a moment ??</span></code></pre></div>\n<p>So, the value of the variable should be changed or not. Let’s know it by executing it.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2398/0*gYbVqMpscLSHgq5K.png\"></p>\n<p>It changed because the variable <strong>a</strong> is accessible inside the function because it is declared globally. So, when we call the <strong>IAmLocal()</strong> function, that reassigned the value of <strong>a</strong> again. Now, let’s go to local scope.</p>\n<h2>What is Local Scope?</h2>\n<p>When we declare a function it creates its own scope. So, whenever a function is declared it creates its local scope which is limited to that function. So, it means that if you are declared a variable inside a function it’s limited to it. So, Let’s understand it by a code example:-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">iAMLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">//'global'</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">//??</span></code></pre></div>\n<p>Let’s access the variable outside the function.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*BdTnoZybU23OBJiV.png\"></p>\n<p>OOPS!! It says an error because now the engine looks for the variable <strong>b</strong> globally but it can’t find the value because it is declared in the <strong>iAmLocal()</strong>. So, that’s why it returns an <strong>error</strong>.</p>\n<p>Let’s take another example:-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Declaring second function</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">secondNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//calling secondNumber() and storing it in a variable</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">secondNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, can we access <strong>a</strong> inside the <strong>secondNumber()</strong>. Let’s try it by running it. If we get <strong>15</strong>, that means we can.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2082/0*hz7apAaSbtZ1py_3.png\"></p>\n<p>Yes, It is.</p>\n<h2>Why is that happen?</h2>\n<p>Because when <strong>sum()</strong> is declared it creates its own scope and the variables that are declared inside it can be accessible limited to the scope of the <strong>sum()</strong>. But when we declaring the <strong>secondNumber()</strong> function inside the <strong>sum()</strong> it also creates its own scope. So, when we called <strong>secondNumber()</strong> it gonna look for the value of <strong>a</strong>. It doesn’t find <strong>a</strong> it goes to it parent and checks if there’s <strong>a</strong> is not. Ya, It’s find there and execute that value successfully.</p>\n<h2>== Lexical Scope ==</h2>\n<p>So, Lexical Scope is the same as the nested local scopes but there be little bit difference between them. In this, if the current scope doesn’t find the value then it moves outside to that scope and tries to find the value there. This process continues until it finds the value. Let’s do it by an example:-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//globally</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//locally</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">//returning function</span>\n    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//returning function </span>\n  <span class=\"token punctuation\">}</span>                        <span class=\"token comment\">//returning function</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> addIt <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//?</span></code></pre></div>\n<p>So, In the above code sample, I declared <strong>num1</strong> globally because it’s outside all the loops. Now, when we declared the <strong>add()</strong> function it creates it’s own scope. That’s why <strong>num2</strong> is declared locally so it available in the scope of the <strong>add()</strong> function. So, let’s think and look the code carefully that it gives us the <strong>13</strong> or not.\nLet’s execute it:-</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*C7L8i_uPeEWAs3Xw.png\"></p>\n<p><strong><em>So, what happened here?</em></strong>\nLet’s go on that line where we called the <strong>add()</strong> and stored this in the variable called <strong>addIt()</strong>. So, now <strong>addIt()</strong> holds the return function that is returned by the <strong>add()</strong> function and when we call the returned function we got the correct answer. So, the thing is that how can it access the value of <strong>num1</strong>. So, I write above that if the variable doesn’t find it’s value inside that function so it bubbles out i.e it goes upwards. So, now in the function that is returned by the <strong>add()</strong> function. Now, <strong>num1</strong> finds that is my value presented in this scope if it doesn’t so it moves in the scope of the <strong>add()</strong> and checks it that my value is presented here or not. No, It goes to the global scope where it finds the value and executes it. So, the process of bubbling out and finding it’s value is called <strong>lexical scope</strong>.\nIf it doesn’t find the value then it returns an error saying that variable is not defined.</p>\n<h2>Let &#x26; Const -> How They Effect Scope</h2>\n<p>So, let and const are new members in the family of variables declarations in JavaScript. So, they help us to create a scope and helps the variable to not get hoisted. Let’s take an example:-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ni<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Can I access it out side??.</span></code></pre></div>\n<p>Let’s check out it:-</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*fY4-jWneHGHt0pOj.png\"></p>\n<p>So, we can access the variable <strong>i</strong> outside the loop because we know that only function can create their own scope. So, <strong>for loop</strong> declared in the global scope. That’s why in the last when the loop got executed we got the increased value of <strong>i</strong>.\nLet’s do it again but put <strong>let</strong> instead of <strong>var</strong> :-</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ni<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Can I access i now??</span></code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*Xr4qxHLAG4TfWen_V3idkw.png\"></p>\n<p>Ya, it said a <strong>error</strong> saying <strong>*i</strong> is not defined* because <strong>let</strong> creates a scope to that variable.\n<strong>const</strong> is also same as the <strong>let</strong> but you can’t reassign a value again. So, assigning value with <strong>var</strong>, <strong>let</strong> and <strong>const</strong> depends on your need that you want to access that variable locally or want to update the variable as value reassigned to it.</p>\n<p>Thanks for reading…</p>\n<p>Follow me on <strong><a href=\"https://twitter.com/am_pra_veen\">Twitter</a></strong> and check all these Gists on <strong><a href=\"https://gist.github.com/praveen-me\">GitHub</a></strong>.</p>","wordCount":{"words":907},"excerpt":"A scope is like a limited area. Scopes are the essential part of every programming language. They are behaving like a limited space for a declaration…","frontmatter":{"title":"Scope: Local, Global and Lexical","date":"6-9-2018"}}},{"node":{"fields":{"slug":"/posts/7-5-2018-how-udacity-gave-confidence-to-me/"},"html":"<p><strong>The Google Udacity India Scholarship</strong></p>\n<p>Hey Guys,\nThere’s nothing new in this but you found something special I thought that hold you guys to think for a sec. I am not good a writing .\nThis Scholarships give me hope for that <strong>Why should I code</strong> because before this I just code it’s just like hobby to me.\nSo, this story takes only 5 minutes of your precious time and I am sorry all of you for that. My grammar is not quite good.And I hope it be quite interesting for you. So, Here’s my story start.</p>\n<h3>How I got knew about this program?</h3>\n<p>In the late December, I surf to the <a href=\"https://udacity.com\">Udacity</a> and read the blog of the <a href=\"https://udacity.com\">Udacity </a>which are quite inspiring and I have a regular habit to read the blogs.\nI surf over the blog and I saw something that is for me. I saw that Google got collaborate with <a href=\"https://udacity.com\">Udacity</a> and announces 30000 scholarships for\n<em>Mobile and Web Development</em>. And I passionate about <strong>Web Development</strong> so without wasting time to think about think I surf the application and view\nwhat they need and I saw something about that need a Github Reposritry(It’s optional) but I don’t want to loose any chance to this scholarship So\nI thinking some and write my repo and in the late January I submit the form. I filled my form based for Front-End Track.</p>\n<h3>That day came When I got my most beloved mail till now.</h3>\n<p>They said that the result got out on <em>Feb 8</em> and recipients got email about that But out on the <em>Feb 7</em> and It said that your application got accepted for\nFront-End Track and the classes start from <em>Feb 14</em>. It’s just like that I got the chance to prove myself.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*VJ2NqVfjNExtzypPX9gceQ.png\" alt=\"That Best Mail I got\"><em>That Best Mail I got</em></p>\n<h3>The Day when classes get started.</h3>\n<p>I called an ISP vendor and take a connection of Internet because before I used my friend’s <em>JIO</em>. So, Thanks <a href=\"https://udacity.com\">Udacity</a>, now I have unlimited data. 😄\nIt’s the morning of Feb 14 and sit on my P.C and excited about the classes and the cohort of the program. I played the first video of the program in that\nThey said that there’s something called <em>Slack</em> and <em>Discussion Forum</em>(I knew about it) but I don’t about* Slack* and thought what this on the starting 2–3 days the link to slack is not opened yet.</p>\n<h3>The Time When Everything got Setup.</h3>\n<p>Now, It’s the time when <em>Slack</em> got opened properly and I see that I just like an chatting app and through we got easily interacted with our cohort member.\nAnd There’s discussion forum also where we can ask questions and answer the others question. And I liked it because I like to answer queries of others.\nSo, I answer others questions and also ask my queries. I answer as best I can.\nHere’s my currently discussion forum progress.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2282/1*nbaUj6Lci132GyCEsAUxOg.png\" alt=\"My Discussion Forum Progress\"><em>My Discussion Forum Progress</em></p>\n<p>And Now, I talked about Slack. I got addicted to it. It’s just like a habit to me to ask and answer and knew new stuff that I don’t know yet.\nIt’s just like a medicine dose to me like You have to take it after wake up in morning and also take before you go to bed. 😆</p>\n<p>And, After some days <strong>Akshit Jain Sir</strong> made announcement that anyone who wants to be a moderators just fill out a form. Without wasting the time I applied for moderator.</p>\n<p>And After some days I got a message form <strong>Akshit Jain Sir</strong> to be a moderator of <em>#live<em>help</em>official</em>(It’s the channel where a live help session is conducted twice a week). It also just like a appreciation for me.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*5PB_tkI7cSUbaylBF5FVBQ.png\" alt=\"The post after end by **Iip Sir**.\">*The post after end by <strong>Iip Sir</strong>.*</p>\n<p>And Now, my work start because as a moderators to help\n<em>Iip Permana Sir(<a href=\"http://twitter.com/iip\">@iip</a>.udacity)</em> to take sessions. And It’s just like to work with a expert and help him. And after some time *Iip Permana Sir(<a href=\"http://twitter.com/iip\">@iip</a>.udacity) *mentions my name in his good bye post before the session got over. It’s also kind of appreciation to me.</p>\n<h3>One more Important announcement which gives a chance to <strong>BE</strong>.</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*QLa0bIRpglEVVZ8kFzUhTg.png\" alt=\"Mail got for Google I/O.\"><em>Mail got for Google I/O.</em></p>\n<p>Now, In at March 23 <strong>Akshit Jain  Sir</strong> made a another announcement in that He said that we got some surprise email.\nI check my mail without wasting the time. And a mail came from <strong>Udacity India</strong>. The mail said that win a chance for Google I/O and in that they told that for this you have to complete your challenge course by 80% percent.</p>\n<p>At that time I completed 60% and I looked at the date there are 5 days to me and now I try to complete 80% by 28 May. And I complete and filled the form.\nNow, I eagerly wait for the mail and at April 2 I got the mail from [*<strong><em>Akshit Jain  Sir</em></strong> in that He said <strong>“You might need a chair somewhere near you so that you can sit and see the news I have got for you in this email.”</strong> and <strong>“Congratulations! You have been selected as one of the waitlist participants for the trip to Google #IO18 on behalf of Google and Udacity.”</strong>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2094/1*7hsfXmpbvVovGtd6bQWc-Q.png\" alt=\"That mail I got from** Akshit Sir **on the behalf of Google I/O\"><em>That mail I got from</em> <em>Akshit Sir** on the behalf of Google I/O</em></p>\n<p>It’s just like a daydream to me but there’s a problem in this <strong>I am not 18 yet and there’s only 2 months left to me for completing 18</strong>. So, I told [*<strong><em>Akshit Jain  Sir</em></strong> about that But according to the terms of the contest I am have to be 18.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*YMhs9LJMxazdOFjRaoZyqw.png\" alt=\"Message That I got By **Akshit Sir** after asking about this situation.\">*Message That I got By <strong>Akshit Sir</strong> after asking about this situation.*</p>\n<h3>About Mentor of Our Program</h3>\n<p><strong>Akshit Jain  Sir</strong> — He’s the mentor of the slack and all work in slack under him. He never late to reply my answer. And the best quality of him that he’s very polite.</p>\n<p><em>Iip Permana Sir(<a href=\"http://twitter.com/iip\">@iip</a>.udacity)</em> — He’s the mentor for #live<em>help</em>session channel. He never left anyone post without replying anybody.</p>\n<p><em>Avi(<a href=\"http://twitter.com/aviaryan\">@aviaryan</a>)</em>— He’s the forum mentor and best. Whenever he replies with a perfect reason behind it.</p>\n<h3>About my Cohort</h3>\n<p>I thanked <strong><a href=\"https://udacity.com\">Udacity</a></strong> for this amazing cohort. They just like dying for help others. As well as in <em>Forum</em> or in <em>Slack</em> someone ask any query on any base I surely tell you won’t be disappointed. Even in night at any time you want to ask there are many night crow who are always waked and ready for help.\nI don’t know how can they do that 😜. That’s the reason behind I got addicted to this community.</p>\n<h3>At last, Covert <strong>HOPE INTO OPPORTUNITY</strong></h3>\n<p>As I mentioned in this title. Convert your <em>Hope</em> in <em>Opportunity</em> because first you have some hope for doing better then it is in you hand to make a opportunity for you or not. <em>Opportunity</em> don’t came to you directly first it gives you some hope.</p>\n<p><strong>Thanks all of you that you guys gave some time to look at this. 😃</strong></p>","wordCount":{"words":1207},"excerpt":"The Google Udacity India ScholarshipHey Guys, \nThere’s nothing new in this but you found something special I thought that hold you guys to think for a…","frontmatter":{"title":"How Uadcity gave more confidence to me?","date":"7-5-2018"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":5,"numPages":2,"currentPage":1}}}