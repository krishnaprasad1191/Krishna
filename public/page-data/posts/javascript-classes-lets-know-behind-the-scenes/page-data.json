{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/javascript-classes-lets-know-behind-the-scenes/","webpackCompilationHash":"ce41eefb3168a986f186","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*H-pLl9S63QJl49ad8Fa-tg.jpeg\"></p>\n<p>So, as we know <strong>JavaScript Classes</strong> are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a very structured way. In this article, I am not going to tell you how to write a <strong>JavaScript Classes</strong> my main focus is just to implement in different approaches.\nIn this article we are going to implement <strong>JavaScript Classes</strong> in three ways:-</p>\n<ul>\n<li><strong>Using Factory functions</strong></li>\n<li><strong>Using Constructor Function (Pseudo Class)</strong></li>\n<li><strong>Using Classes</strong>\nSo, let’s start.</li>\n</ul>\n<h2>Using Factories Functions</h2>\n<p>As I wrote we are going to implement by <strong>factories function</strong>. Let’s first talk about what are <strong>factories functions</strong>.\n<strong>Factories functions</strong> are simple functions that take values from and returns an object to you they are not <strong>constructor</strong> functions. We just have to call them and they just return us an object and we can store these object in any variable.\nNow, we going to apply our <strong>class</strong> using these <strong>factories functions</strong>.\nLet’s first make an object that holds the function that is linked with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">[[Prototype]]</a> of the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> studFunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">percentage</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">result</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we created an object that has two methods <strong>percentage</strong> and <strong>result</strong> for our <strong>Student</strong> object.\nNow, let’s create a factory function that creates an object for us and return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>studFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, here we created a function that takes send three parameters and then we created an object using <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a></strong> because of this method us to create an empty object and set the <strong>[[Prototype]]</strong> to the <strong>studFunctions</strong> that we created. Now, we created our class now it’s time to create instances with this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span>stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 63.33</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass</span></code></pre></div>\n<h2>Using Constructor Function (Pseudo Class)</h2>\n<p>Now it turns to make the class using the pseudo-class method. For that first, we have to create a constructor function for that.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, we just here created a function that takes three parameters and inside that <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this\">this</a></strong> because in the after some time we are going to call this function with <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/new\">new</a></strong> operator that returns an object from that function and then <strong>this</strong> refers to that same object.\nNow we are putting some function in the <strong>prototype</strong> of the function. <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Prototype</a></strong> is just a simple object that default attach with the function and contains a contains a default <strong>constructor</strong> property that points to the same function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">percentage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, same as previously did we did same just putting the method in the prototype of the function.\nWe created our class. Now let’s just make an instance from this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2>Using Classes (ES6 classes)</h2>\n<p>Now finally, we are going to implement <strong>JavaScript classes</strong> using ES6 classes.\nFor that, we just have first had to put <strong>class</strong> keyword in front Class name inside that there’s a special <strong>constructor</strong> method where we just going to put values as we did in previously where we make constructor function. Then just simply put the method that we put in the <strong>prototype</strong> in the previous section.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we created our class with ES6 class syntax also. Now just initiate our class as we previously did in <strong>pseudo class</strong> part.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2><strong>Conclusion</strong></h2>\n<p>So, If you compare all these three approaches to writing <strong>JavaScript class</strong> then you the last step of making classes easier and cleaner way. But the motive of this article is just to demonstrate how it works behind the scenes i.e if we broke down to make a class into smaller parts then <strong>factory functions</strong> approach makes gave you an idea how it works.</p>\n<p>Follow me on <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.<br/>\nFollow me on <a href=\"https://github.com/praveen-me\">Github</a>.</p>","excerpt":"So, as we know JavaScript Classes are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a…","wordCount":{"words":570},"fields":{"slug":"/posts/javascript-classes-lets-know-behind-the-scenes/"},"frontmatter":{"title":"JavaScript Classes: Let’s Know Behind the Scenes","date":"11-30-2018"}},"site":{"siteMetadata":{"siteUrl":"https://praveen-me.github.io","author":"am_pra_veen"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript-classes-lets-know-behind-the-scenes/"}}}