{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"3b8b0e8bdddf1e4fa9fe","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/posts/make-a-todo-list-using-react-hooks/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yCfHA67G2vPV7mmgzYpIgg.png\"></p>\n<p><strong>React Hooks</strong> are upcoming features in the React family and the interesting part of React Hooks are that we can use state in <strong>functional components</strong>.\nSo, no more class components it doesn’t mean the support for class components is going to be stopped there. <strong>Class components</strong> are still there.\nBut React Hooks are currently in the alpha version of <strong>React</strong> i.e <strong>v16.8.0-alpha.0</strong>. But we can use them through the alpha version.</p>\n<h2>Setup for React Hooks</h2>\n<p>First, we need to make a react app using <strong>create-react-app</strong>. It will make a create an app for us. For that just run in your terminalnpx create-react-app hooks-todo. It takes some time then it’ll create a react app for you now just to the app by runningcd hooks-todo now we have our <strong>react-app</strong> ready. Run npm install react@next react-dom@next that’ll install the alpha version of React in out app.</p>\n<h2>Let’s Make the Todo</h2>\n<p>In this project, our focus is not to make a layout. So please copy the SASS file for the project from <a href=\"https://gist.github.com/praveen-me/6da4e55421e61adeb91b6d9103814a7f\">here</a>. If you don’t have sass package install just run npm i node-sass.\nNow, let’s move into our App.js and make the App component <strong>functional</strong>. So, now our first move is to make the form for submitting our todo. Just copy this snippet of code into the return statement of our App component. I also called a function on events. We’ll take a look at them later.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3112/1*gjDdZHOgAXZ_TPoK-PJ_zg.png\" alt=\"Todo form for adding todo\"><em>Todo form for adding todo</em></p>\n<p>Now, let’s make a state for storing the current todo value. We are using useState <strong>state hook</strong> for making state. We need to import it from <strong>react</strong>.\nFor that add this line at the top of the file <code class=\"language-text\">import React, { useState } from react</code>. Now, go inside our App then add const <code class=\"language-text\">[todoValue, setTodoValue] = useState(&#39;&#39;)</code>. So, here we are making a state <strong>todoValue</strong> and <strong>setTodoValue</strong> is for updating the value of <strong>todoValue</strong> and in the <strong>useState</strong> part, we are just setting the initial value of <strong>todoValue</strong> state by calling useState(). So, if you take a look we are using the array destructing here. <strong>useState</strong> returns an array that the first element of the array is stated name and the second item of the array is the function for updating the value of that state.\nNow, let’s make the <strong>handleChange</strong> function.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*H3FQO1MWyEd7miYraXgJ9Q.png\" alt=\"handleChange for setting current todo value\"><em>handleChange for setting current todo value</em></p>\n<p>So, simple for setting the current todoValue just call the <strong>setTodoValue</strong> function and pass the value as an argument.</p>\n<p>Now, It’s time to work on our adding todo.\nFor that, we need another state. Let’s make const <code class=\"language-text\">[todos, setTodo] = useState([]);</code>. So, we make another state and all our todos are going to store here. I previously made an event-handler to submitting to-do form. Let’s made a function called <strong>handleSubmit</strong> that take care of submitting todo.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*0i8X3wwmpbYUV3c0lmcgzQ.png\" alt=\"function for submitting todo\"><em>function for submitting todo</em></p>\n<p>It’s so simple from line 4 to line 7 we just making a todo object. And then in line 10 we just call <strong>setTodo</strong> function and passing a new array as an argument and the spreading the <strong>todos</strong> array for previous todos and then just adding todo at the end of the array. Now, we did our adding todo functionality we just need to display them.\nWe have to map over the <strong>todo</strong> array and make an element for every todo.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3416/1*V9rjJhWJzR1LqhbkohU-IA.png\" alt=\"block for dispalying todo\"><em>block for dispalying todo</em></p>\n<p>Paste this snippet after the parent div of the App component. As you see we just map over the todos array and creating a block for every todo. I also added the event handler for adding done and delete functionality in our todo.</p>\n<p>Let’s work on delete our todo.\nFor this, we have to make a <strong>handleDelete</strong> function. We take the id from it’s parent element of the delete button and then just going to splice that index form the array then just again called the <strong>setTodo</strong> function and make the new array and spread all todos.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*MbEox6RvBCE1M1kF5H761w.png\" alt=\"function for deleting todo\"><em>function for deleting todo</em></p>\n<p>Now, we completed our delete todo functionality.\nNow, let’s work on <strong>handleDone</strong> functionality of the todo. For that, let’s just create <strong>handleDone</strong> function. In that, we are going to take the id from its parent element and then change the <strong>done</strong> of that todo and set the <strong>todos</strong> using <strong>setTodo</strong> method.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*saUQtUiFFCWcBpC7wLrN4w.png\" alt=\"function for handling done of todo\"><em>function for handling done of todo</em></p>\n<p>Congrats, We completed our todo using hooks. I am glad if you make some changes and add more functionality using hooks don’t stop keep experimenting. Get the code of the App from <a href=\"https://gist.github.com/praveen-me/74d58161e1c863b6310d04e81e204c10\">here</a>.</p>\n<p>Follow me on <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.\nCheck out my <a href=\"https://github.com/praveen-me\">GitHub</a> profile.</p>","wordCount":{"words":762},"excerpt":"React Hooks are upcoming features in the React family and the interesting part of React Hooks are that we can use state in functional components.\nSo…","frontmatter":{"title":"Make a Todo List Using React Hooks!!","date":"1-13-2019"}}},{"node":{"fields":{"slug":"/posts/jwt-json-web-token-implementation-with-node/"},"html":"<p>JSON Web Token is an open, industry-standard RCF 7519 method for authorizing transaction or requests between two parties. Basically, JWT used for the authorization purpose. We can authorize through session, cookies and third-party authorization.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*IqAodJn46th31XLkU5Qf1w.jpeg\" alt=\"Source — [http://robmclarty.com/blog/what-is-a-json-web-token](http://robmclarty.com/blog/what-is-a-json-web-token)\"><em>Source — <a href=\"http://robmclarty.com/blog/what-is-a-json-web-token\">http://robmclarty.com/blog/what-is-a-json-web-token</a></em></p>\n<h3>Steps What happened basically:</h3>\n<ul>\n<li>\n<p>The user sends the login credentials. If succeed, the server sends back a JWT token.</p>\n</li>\n<li>\n<p>The sent JWT token to have to be stored in local storage.</p>\n</li>\n<li>\n<p>Now, the client takes JWT and makes a request by putting JWT in Authorization header for data for the user.</p>\n</li>\n<li>\n<p>The server verifies the JWT. If successful then sends the data back to the client.</p>\n</li>\n<li>\n<p>After every request from the client side made by putting JWT in the authorization header.</p>\n</li>\n<li>\n<p>On logout, just destroy the JWT locally.</p>\n</li>\n</ul>\n<h2>Creation of JWT</h2>\n<p>There’re a lot of packages but we are going to use <a href=\"https://www.npmjs.com/package/jsonwebtoken\">jsonwebtoken</a> for creating JWT and for checking purpose we can use passport’s JWT strategy package.\nSo, we have to install <a href=\"https://www.npmjs.com/package/passport\">passport</a>, <a href=\"https://www.npmjs.com/package/passport-jwt\">passport-jwt</a> and <a href=\"https://www.npmjs.com/package/passport-local\">passport-local</a>.\nNow, It’s time to create JWT. Let’s assume that we have some user login credentials.\nLet’s make a passport module for passport functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> passport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> LocalStrategy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport-local'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Stratergy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Use Local Startergy for authenticating user </span>\n    passport<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalStrategy</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">:</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">verifyPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Apply passport authentication for getting user payload app.post('/login', (req, res, next) => {</span>\n      passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> userData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userData <span class=\"token operator\">||</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'Account not available. Please Sign Up.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          req<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              token<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">:</span> userData<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we get the token on the client side. Then it should be an encrypted string like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">**</span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class=\"token operator\">**</span><span class=\"token punctuation\">.</span>\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<span class=\"token operator\">*</span></code></pre></div>\n<p>This string contains three parts as you see above. Let’s break them down:</p>\n<ul>\n<li><strong>**</strong> Part — Contains constructing algorithm and type of token</li>\n<li>Normal Part — Payload data it is created</li>\n<li><strong>*</strong> Part — Signature (base64UrlEncode(header) + ‘.’+\nbase64UrlEncode(payload))</li>\n</ul>\n<h2>Applying JWT for Authorization</h2>\n<p>Now, we have the JWT at our client and now we have to save that in our local-storage for getting the data throughout the application.\nNow after that, if we want to get the data of the user then we have to make a <strong>GET</strong> request by passing that JWT in <strong>authorization</strong> header:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token punctuation\">:</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Authorization'</span> <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jwt'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we are going to use the passport-jwt for verifying the token that is coming from the client-side.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> JwtStrategy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport-jwt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Strategy<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ExtractJwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport-jwt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ExtractJwt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Using passport-jwt stratergy</span>\n    passport<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      jwtFromRequest <span class=\"token punctuation\">:</span> ExtractJwt<span class=\"token punctuation\">.</span><span class=\"token function\">fromAuthHeaderAsBearerToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      secretOrKey <span class=\"token punctuation\">:</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jwt_payload<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>_id<span class=\"token punctuation\">:</span> jwt_payload<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we implemented our passport middleware and we have to just call the passport authentication method on whatever endpoint we want to authenticate.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>user\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, we implemented JWT using Node.\nCheck the code gist from <a href=\"https://gist.github.com/praveen-me/a10e0032b4b2331cc7df4302931b8f41\">here</a>.\nConnect me through <a href=\"https://github.com/praveen-me\">Github</a> and <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.</p>","wordCount":{"words":365},"excerpt":"JSON Web Token is an open, industry-standard RCF 7519 method for authorizing transaction or requests between two parties. Basically, JWT used for the…","frontmatter":{"title":"JWT(JSON Web Token) : Implementation with Node","date":"1-15-2019"}}},{"node":{"fields":{"slug":"/posts/implementing-simple-spa-routing-using-vanilla-javascript/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mHQDsqWBWs3tBrPz2uZWtA.jpeg\"></p>\n<p>In this article, I am going to implement <strong>SPA</strong> routing using <strong>Vanilla JavaScript</strong>.\nSo, the main motive behind this article to get an understanding of how SPA routing works. Before we get into this we need to understand the main components of routing i.e Web <strong>History</strong> and <strong>Location</strong> API.</p>\n<h2>History and Location Object</h2>\n<p>Let’s first talk about <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\">window.history</a></strong>. History contains all the browser history you can simply access it by typing <em>history</em> and then you’ll get the whole history object and the variety of method’s it has.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2346/1*o5aivA_EwWECOOZnq2GYog.png\" alt=\"window’s history object\"><em>window’s history object</em></p>\n<p>And another one that we are going to use is <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location\">window.location</a>.</strong> It contains all the information about the current location such as origin, pathname, etc. If you type <em>location</em> in your terminal then you got the whole location object.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2254/1*GHosXKQnj5bwM8x3jo8wKQ.png\" alt=\"window’s location object\"><em>window’s location object</em></p>\n<h2>Let’s start Routing</h2>\n<p>So, first of all, we need to make an <strong>index.html.</strong> It contains all the markup for our app. For this right, we just need to make a div of the *id *of <strong>root</strong>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*gbW54Pe4_GxHFe4hxB0V8w.png\" alt=\"index.html\"><em>index.html</em></p>\n<p>Now, we are done with that make our page. That is going to render in <strong>root</strong> area.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2840/1*FbzwL2Qa7-_o2CXBgHmTyA.png\" alt=\"Our three different components\"><em>Our three different components</em></p>\n<p>Now, we make our three different pages let’s import them in our index.html’s <strong>head **section. Now we have to use a server to serve these pages so in this I am going to use **live-server</strong>. If you have live-server it’s well and good just go to the folder directory and run live-server otherwise install it using npm i -g live-server.\nNow, it’s time to make our main JavaScript file that contains all our routing logic.\nLet's make a file called app.js.\nThen first we have to decide our routes and page specific to that particular route and put them in an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'/'</span> <span class=\"token punctuation\">:</span> home<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/contact'</span><span class=\"token punctuation\">:</span> contact<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/about'</span><span class=\"token punctuation\">:</span> about\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Our next work is to render a page when the index initially loaded. For that first, we have to select the <strong>root</strong> div and then use innerHTML method to add the content to the element according to the path.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> rootDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rootDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here <strong>window.location.pathname</strong> will give the current path and when the page is loaded the current path is going to <strong>‘/’</strong>. But our work is not done here yet. Now, we also have to make the route for ‘/about’ and ‘/contact’ page. For that, we are going to create a simple navigation menu.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3328/1*HRolE_-GnyX2C7o-ye5ZIQ.png\" alt=\"Simple navigation for navigating through sections.\"><em>Simple navigation for navigating through sections.</em></p>\n<p>Now, we are going to make a function that helps us to navigate through section it takes a path and then uses <strong>history.pushState()</strong> method that takes three parameters i.e state, title, and the route to push and to push the current route into history object so we can also navigate through the browser <em>backward</em> and <em>forward</em> button and then render the section according to the current path.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3160/1*nok3v9iCyS75U1G0dgWHow.png\" alt=\"onNavigate Method\"><em>onNavigate Method</em></p>\n<p>Now, just call this **onNavigate **method on the **onClick **event of our navigation menu’s a tag. We just need to do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"onNavigate('/about'); return false;\"</span><span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token comment\">// repeat for other routes also.</span></code></pre></div>\n<p>Congrats you just make your own router and when you pressing browser’s forward and backword button you see that the route actually changes but wait for your page is not changing. So, this is because when the browser call’s it’s <strong>pushState()</strong> method than another method is also called i.e <strong>window.onpopstate</strong> it’s a simple function where you can customize it according to your need. So, whenever the pushState is called we are going to render our section. For that all we need to apply this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpopstate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      rootDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Congrats you finally have done with it.</p>\n<p>If you want to follow the code. Check out GitHub repo from <a href=\"https://github.com/praveen-me/simple-vanila-router\">here</a>.\nIf you want to connect with me check out my <a href=\"https://twitter.com/am_pra_veen\">Twitter</a> and <a href=\"https://github.com/praveen-me\">Github</a>.</p>","wordCount":{"words":609},"excerpt":"In this article, I am going to implement SPA routing using Vanilla JavaScript.\nSo, the main motive behind this article to get an understanding of how…","frontmatter":{"title":"Implementing Simple SPA Routing Using Vanilla JavaScript","date":"1-4-2019"}}},{"node":{"fields":{"slug":"/posts/redux-thunk-a-simple-action-creator-nothing-more/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1508522109214-4df07c2e9d90\"></p>\n<p>So, I am going to talk about a really interesting topic i.e <strong>Redux Thunk.</strong> So first, if you are a beginner in redux and want to learn what does actually redux thunk is and why should you use it and by the end of the article you have a good understanding of <strong>Redux Thunk</strong>. So, before moving directly to <strong>redux thunk</strong> let’s just first talk about <strong>Action Creator</strong> in Redux.</p>\n<h2><strong>What is Action Creator?</strong></h2>\n<p>So, In Redux <strong>action</strong> is some kind of event that is triggered on a specific situation. Suppose, the user clicks a button then the user just want to perform some action. So, As you know that according to the paradigm of redux whenever you want to perform some action then you have to dispatch that action. And when you are dispatching that action you can send any kind of data with it. So, action creator is a simple function that takes data and dispatch inside itself. And you can import that action creator and map dispatch function to props using connect higher-order component from <strong>react-redux</strong> package. Then all you need is that just handle that event and call that action creator from props and pass the specified data into it. So, that means action creator only need that data you want to send when going to do everything for you.\nNow, let’s just talk about what is <strong>Redux Thunk</strong>.</p>\n<h2>What is Redux Thunk?</h2>\n<p>So, as I mentioned <strong>redux thunk</strong> is just an action creator with some extra power that helps us to deal with asynchronous calls. So, before you want to use <strong>redux thunk</strong> you have to know what is it actually. <strong>Redux Thunk</strong> is a middleware (middleware is some kind of code that runs b/w two main phases of <strong>redux paradigm</strong> i.e dispatching an action and taking that action to the reducer) that has a functionality of pausing and resuming the dispatch action. So, what is actually does when we dispatch an action creator it just takes data and perform some async call for that time until it gets the <strong>response</strong> it’s pause the dispatching of that action there and if it gets the <strong>response</strong> and then it going to resuming that dispatching that action and then goes to <strong>reducer</strong>.</p>\n<h2><strong>How to use a Redux Thunk?</strong></h2>\n<p>So, if you want to use the <strong>redux thunk</strong> then you have to install a <strong>redux-thunk</strong> package and import <strong>thunk</strong> from it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-thunk\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you got the redux thunk. Now you have to import <strong>applyMiddlware,</strong> and <strong>compose</strong> from <strong>redux</strong> package.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">,</span> compose <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you have that. So, go to that file where you created your store and pass <strong>compose</strong> as the second parameter besides the <strong>rootReducer</strong> and inside that call <strong>applyMiddlware</strong> and pass <strong>thunk</strong> inside it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, now you just add thunk to your project and you can create your own <strong>thunk</strong> now. I am here making a simple thunk that helps you to make just a better understanding of <strong>thunk</strong>.\nSo, suppose you want an app where you just gave a Github username and it will give you the whole data when you submit a form.\nSo, let’s just make a simple thunk i.e a function called <strong>setUserData</strong> that takes the only username when the user is submitting a form.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUserData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://api.github.com/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type <span class=\"token punctuation\">:</span> <span class=\"token string\">\"SET_USER_DATA\"</span><span class=\"token punctuation\">,</span> userData <span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type <span class=\"token punctuation\">:</span> <span class=\"token string\">\"SET_USER_ERR\"</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, we just make <strong>thunk</strong> so what it does it takes a username and fetch the <strong>userData</strong> and when it has the response it just resuming the dispatching of action.\nNow, I made this thunk, how can I use this.\nSo, All you need is just you have to import the <strong>thunk</strong> in the component you want to send the data.\nSo, for that, you have to import <strong>connect</strong> higher-order component form <strong>react-redux.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>connect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> setUserData <span class=\"token keyword\">from</span> <span class=\"token string\">'./thunk'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you have to call it like you want to use store in the component to change the view and you have to make a function that map **dispatch **into props.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">setUserData</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, now all you need is just call the <strong>setUserData</strong> function from props when you are going to handle that event.\nYou can do like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, this all we need to apply a <strong>Redux Thunk</strong>.</p>\n<h2>Benefits of Using Redux Thunk</h2>\n<p>So, normally an <strong>action creator</strong> is returning an object but in case of <strong>thunk</strong> it returns and function where you can do some asynchronous work and when that work is done then from that function you can return the object by calling dispatch method. <strong>Thunk</strong> is a middleware that means you can perform anything before the action is going to the reducer but it’s ideal for asynchronous work.</p>\n<p>Follow me on <a href=\"https://twitter/am_prav_veen\">twitter</a>.\nFollow me on <a href=\"https://github.com/praveen-me\">Github</a>.</p>","wordCount":{"words":760},"excerpt":"So, I am going to talk about a really interesting topic i.e Redux Thunk. So first, if you are a beginner in redux and want to learn what does actually…","frontmatter":{"title":"Redux Thunk: A Simple Action Creator Nothing More","date":"11-18-2018"}}},{"node":{"fields":{"slug":"/posts/javascript-classes-lets-know-behind-the-scenes/"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*H-pLl9S63QJl49ad8Fa-tg.jpeg\"></p>\n<p>So, as we know <strong>JavaScript Classes</strong> are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a very structured way. In this article, I am not going to tell you how to write a <strong>JavaScript Classes</strong> my main focus is just to implement in different approaches.\nIn this article we are going to implement <strong>JavaScript Classes</strong> in three ways:-</p>\n<ul>\n<li><strong>Using Factory functions</strong></li>\n<li><strong>Using Constructor Function (Pseudo Class)</strong></li>\n<li><strong>Using Classes</strong>\nSo, let’s start.</li>\n</ul>\n<h2>Using Factories Functions</h2>\n<p>As I wrote we are going to implement by <strong>factories function</strong>. Let’s first talk about what are <strong>factories functions</strong>.\n<strong>Factories functions</strong> are simple functions that take values from and returns an object to you they are not <strong>constructor</strong> functions. We just have to call them and they just return us an object and we can store these object in any variable.\nNow, we going to apply our <strong>class</strong> using these <strong>factories functions</strong>.\nLet’s first make an object that holds the function that is linked with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">[[Prototype]]</a> of the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> studFunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">percentage</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">result</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we created an object that has two methods <strong>percentage</strong> and <strong>result</strong> for our <strong>Student</strong> object.\nNow, let’s create a factory function that creates an object for us and return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>studFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, here we created a function that takes send three parameters and then we created an object using <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a></strong> because of this method us to create an empty object and set the <strong>[[Prototype]]</strong> to the <strong>studFunctions</strong> that we created. Now, we created our class now it’s time to create instances with this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token function\">studFactory</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span>stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 63.33</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span>stud1<span class=\"token punctuation\">.</span>phy<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>che<span class=\"token punctuation\">,</span> stud1<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass</span></code></pre></div>\n<h2>Using Constructor Function (Pseudo Class)</h2>\n<p>Now it turns to make the class using the pseudo-class method. For that first, we have to create a constructor function for that.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">Student</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, we just here created a function that takes three parameters and inside that <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this\">this</a></strong> because in the after some time we are going to call this function with <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/new\">new</a></strong> operator that returns an object from that function and then <strong>this</strong> refers to that same object.\nNow we are putting some function in the <strong>prototype</strong> of the function. <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Prototype</a></strong> is just a simple object that default attach with the function and contains a contains a default <strong>constructor</strong> property that points to the same function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">percentage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, same as previously did we did same just putting the method in the prototype of the function.\nWe created our class. Now let’s just make an instance from this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2>Using Classes (ES6 classes)</h2>\n<p>Now finally, we are going to implement <strong>JavaScript classes</strong> using ES6 classes.\nFor that, we just have first had to put <strong>class</strong> keyword in front Class name inside that there’s a special <strong>constructor</strong> method where we just going to put values as we did in previously where we make constructor function. Then just simply put the method that we put in the <strong>prototype</strong> in the previous section.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phy <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>che <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we created our class with ES6 class syntax also. Now just initiate our class as we previously did in <strong>pseudo class</strong> part.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> stud1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//76.67</span>\n    stud1<span class=\"token punctuation\">.</span><span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'pass'</span></code></pre></div>\n<h2><strong>Conclusion</strong></h2>\n<p>So, If you compare all these three approaches to writing <strong>JavaScript class</strong> then you the last step of making classes easier and cleaner way. But the motive of this article is just to demonstrate how it works behind the scenes i.e if we broke down to make a class into smaller parts then <strong>factory functions</strong> approach makes gave you an idea how it works.</p>\n<p>Follow me on <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.<br/>\nFollow me on <a href=\"https://github.com/praveen-me\">Github</a>.</p>","wordCount":{"words":570},"excerpt":"So, as we know JavaScript Classes are just a way of working on our problem using the OOP paradigm that helps us to solve our problem in a very…","frontmatter":{"title":"JavaScript Classes: Let’s Know Behind the Scenes","date":"11-30-2018"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}