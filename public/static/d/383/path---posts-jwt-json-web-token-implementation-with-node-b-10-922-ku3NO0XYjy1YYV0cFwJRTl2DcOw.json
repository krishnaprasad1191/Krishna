{"data":{"markdownRemark":{"html":"<h1>JWT(JSON Web Token) : Implementation with Node</h1>\n<p>JSON Web Token is an open, industry-standard RCF 7519 method for authorizing transaction or requests between two parties. Basically, JWT used for the authorization purpose. We can authorize through session, cookies and third-party authorization.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*IqAodJn46th31XLkU5Qf1w.jpeg\" alt=\"Source — [http://robmclarty.com/blog/what-is-a-json-web-token](http://robmclarty.com/blog/what-is-a-json-web-token)\"><em>Source — <a href=\"http://robmclarty.com/blog/what-is-a-json-web-token\">http://robmclarty.com/blog/what-is-a-json-web-token</a></em></p>\n<h3>Steps What happened basically:</h3>\n<ul>\n<li>\n<p>The user sends the login credentials. If succeed, the server sends back a JWT token.</p>\n</li>\n<li>\n<p>The sent JWT token to have to be stored in local storage.</p>\n</li>\n<li>\n<p>Now, the client takes JWT and makes a request by putting JWT in Authorization header for data for the user.</p>\n</li>\n<li>\n<p>The server verifies the JWT. If successful then sends the data back to the client.</p>\n</li>\n<li>\n<p>After every request from the client side made by putting JWT in the authorization header.</p>\n</li>\n<li>\n<p>On logout, just destroy the JWT locally.</p>\n</li>\n</ul>\n<h2>Creation of JWT</h2>\n<p>There’re a lot of packages but we are going to use <a href=\"https://www.npmjs.com/package/jsonwebtoken\">jsonwebtoken</a> for creating JWT and for checking purpose we can use passport’s JWT strategy package.\nSo, we have to install <a href=\"https://www.npmjs.com/package/passport\">passport</a>, <a href=\"https://www.npmjs.com/package/passport-jwt\">passport-jwt</a> and <a href=\"https://www.npmjs.com/package/passport-local\">passport-local</a>.\nNow, It’s time to create JWT. Let’s assume that we have some user login credentials.\nLet’s make a passport module for passport functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const jwt = require(&#39;jsonwebtoken&#39;);\nconst app = require(&#39;express&#39;)();\nconst passport = require(&#39;passport&#39;);\nconst LocalStrategy = require(&#39;passport-local&#39;).Stratergy;\n\n// Use Local Startergy for authenticating user \npassport.**use**(**new** LocalStrategy(\n  **function**(username, password, **done**) {\n    User.findOne({ username: username }, **function** (err, user) {\n      **if** (err) { **return** **done**(err); }\n      **if** (!user) { **return** **done**(**null**, **false**); }\n      **if** (!user.verifyPassword(password)) {\n        **return** **done**(**null**, **false**);\n      }\n      **return** **done**(**null**, user);\n    });\n  }\n));\n\n// Apply passport authentication for getting user payload app.post(&#39;/login&#39;, (req, res, next) =&gt; {\n  **passport.authenticate**(&#39;local&#39;, (err, userData) =&gt; {\n      if (!userData || err) {\n        return res.status(404).json({\n          msg: &#39;Account not available. Please Sign Up.&#39;,\n        });\n      }\n      **req.logIn**(user, (error) =&gt; {\n        if (error) return next(error);\n        return res.json({\n          **token: jwt.sign({user: userData}, &#39;secret&#39;),**\n        });\n      });\n    })(req, res, next);\n});</code></pre></div>\n<p>When we get the token on the client side. Then it should be an encrypted string like this.\n<strong>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</strong>.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.<em>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</em>\nThis string contains three parts as you see above. Let’s break them down:</p>\n<ul>\n<li>Bold Part — Contains constructing algorithm and type of token</li>\n<li>Normal Part — Payload data it is created</li>\n<li>Italic Part — Signature (base64UrlEncode(header) + ‘.’+\nbase64UrlEncode(payload))</li>\n</ul>\n<h2>Applying JWT for Authorization</h2>\n<p>Now, we have the JWT at our client and now we have to save that in our local-storage for getting the data throughout the application.\nNow after that, if we want to get the data of the user then we have to make a **GET **request by passing that JWT in **authorization **header:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fetch(&#39;/user&#39;, {\n  method: GET,\n  headers: {\n    &#39;Authorization&#39; : `Bearer ${localStorage.getItem(&#39;jwt&#39;)}`,\n },\n});</code></pre></div>\n<p>Now, we are going to use the passport-jwt for verifying the token that is coming from the client-side.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**const** JwtStrategy = **require**(&#39;passport-jwt&#39;).Strategy;\n**const** ExtractJwt = **require**(&#39;passport-jwt&#39;).ExtractJwt;\n\n// Using passport-jwt stratergy\npassport.use(**new** JwtStrategy({\n  jwtFromRequest : ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey :&#39;secret&#39;,\n  },\n  **function**(jwt_payload, done) {\n    User.findOne({_id: jwt_payload._id}, **function**(err, user) {\n      **if** (err || !user) {\n        **return** done(err, false);\n      }\n      **if** (user) {\n         **return** done(null, user);\n      }\n    });\n}));</code></pre></div>\n<p>Now, we implemented our passport middleware and we have to just call the passport authentication method on whatever endpoint we want to authenticate.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get(&#39;/user&#39;, **passport.authenticate(&#39;jwt&#39;, { session: false }), **(req, res) =&gt; {\n  res.json({\n    user: req.user\n  });\n});</code></pre></div>\n<p>Finally, we implemented JWT using Node.\nCheck the code gist from <a href=\"https://gist.github.com/praveen-me/a10e0032b4b2331cc7df4302931b8f41\">here</a>.\nConnect me through <a href=\"https://github.com/praveen-me\">Github</a> and <a href=\"https://twitter.com/am_pra_veen\">Twitter</a>.</p>","frontmatter":{"title":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/jwt-json-web-token-implementation-with-node/"}}